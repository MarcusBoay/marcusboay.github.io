{"version":3,"sources":["pages/Home/StyledHome.tsx","models/TreeViz.tsx","pages/Home/Home.tsx","pages/TreeViz/StyledTreeViz.tsx","redux/actions/treeVisualizerActions.tsx","redux/reducers/treeVisualizerReducer.tsx","pages/TreeViz/TreeViz.tsx","StyledApp.tsx","redux/sagas/treeVisualizerSaga.tsx","redux/sagas/index.tsx","redux/reducers/index.tsx","redux/store.tsx","App.tsx","serviceWorker.js","index.js"],"names":["NodeState","StyledHomePageLayout","styled","div","StyledHomeFirstSection","StyledHomeFirstSectionTextContainer","StyledHomeHeroContainer","StyledHomeTitle","h1","StyledHomeSubTitle","h3","StyledHomeSecondSectionTextContainer","StyledHomeLink","a","props","showLink","StyledHomeSection","StyledHomeSectionInner","right","StyledHomeSectionTitle","h2","StyledHomeSectionRoleAndYear","StyledHomeSectionRole","h4","StyledHomeSectionYear","StyledHomeSectionText","p","StyledHomeSectionLinksContainer","ul","StyledHomeSectionLinkContainer","li","StyledHomeSectionLink","personLinks","title","url","projects","Home","useState","firstSectionText","setFirstSectionText","secondSectionText","setSecondSectionText","thirdSectionText","setThirdSectionText","showLinks","setShowLinks","firstSectionTextPointer","secondSectionTextPointer","thirdSectionTextPointer","useEffect","interval","setInterval","length","clearInterval","map","link","href","sort","p1","p2","year","project","Section","role","description","d","links","src","image","alt","imageAlt","uuidv1","require","GenNodeValueType","NodeModel","val","id","value","leftChild","rightChild","state","this","undefined","INIT","StyledPageLayout","StyledPageSideTree","svg","StyledPageSideCode","StyledCodePartContainer","StyledGenerateTreePartContainer","StyledGenerateTreeDetailsContainer","StyledGenerateTreeButtonContainer","StyledNodeCircle","circle","VISITING","WAITING","VISITED","speed","StyledNodeValue","text","StyledNodeBranch","line","StyledButton","button","StyledRangedInput","input","StyledPageLinkText","createRootNodeAction","createAction","resolve","nodeId","node","putRootNodeAction","updateTreeAction","putTreeAction","tree","generateTreeAction","putGenHeightAction","genHeight","putGenIsBSTreeAction","genIsBSTree","putGenIsCompleteTreeAction","genIsCompleteTree","putGenIsFullTreeAction","genIsFullTree","putGenNodeValueTypeAction","valueType","preOrderTraversalAction","inOrderTraversalAction","postOrderTraversalAction","levelOrderTraversalAction","resetNodesAction","updateExecutionSpeedAction","treeVisualizerReducer","combineReducers","rootNode","action","type","getType","payload","executionSpeed","genNodeValueType","STANDARD","getRootNodeFromState","treeVisualizer","getTreeFromState","getExecutionSpeedFromState","getGenHeightFromState","getGenIsBSTreeFromState","getGenIsCompleteTreefromState","getGenIsFullTreeFromState","getGenNodeValueTypeFromState","ConnectTreeViz","connect","dispatch","bindActionCreators","createRootNode","resetNodes","preOrderTraversal","inOrderTraversal","postOrderTraversal","levelOrderTraversal","updateExecutionSpeed","generateTree","putGenTreeHeight","putGenIsBSTree","putGenNodeValueType","curNode","onClick","list","min","max","onChange","event","Number","target","label","step","Tree","levelNodes","level","index","x","Math","pow","radius","y","xLeftChild","xRightChild","yChild","thetaLeft","atan","abs","thetaRight","leftBranchXOffset","sin","rightBranchXOffset","leftBranchYOffset","cos","rightBranchYOffset","key","x1","y1","x2","y2","Node","cx","cy","r","dy","StyledAppLayout","createRootNodeSaga","updateTreeSaga","preOrderTraversalSaga","preOrderTraversalSagaHelper","inOrderTraversalSaga","inOrderTraversalSagaHelper","postOrderTraversalSaga","postOrderTraversalSagaHelper","levelOrderTraversalSaga","levelOrderTraversalSagaHelper","resetNodesSaga","resetNodesSagaHelper","generateTreeSaga","treeVisualizerSaga","putResolve","put","console","warn","select","queue","push","nodesLevels","levelSize","curLevel","shift","error","fork","preOrderTask","take","cancel","delay","call","inOrderTask","postOrderTask","levelOrderTask","height","isBST","maxNodes","h","generateNode","curHeight","count","curLevelNodes","cur","minVal","maxVal","floor","RANDOM","random","EMOJI","emojis","all","takeLatest","rootSaga","RootReducer","sagaMiddleware","createSagaMiddleware","middlewares","enhancer","applyMiddleware","store","createStore","run","App","exact","path","component","TreeViz","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,SAAI,SAAI,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,SAAI,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,SAAI,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,SAAI,eAAK,eAAK,SAAI,eAAK,eAAK,SAAI,eAAK,SAAI,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK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","file":"static/js/main.8114c748.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components'\n\nexport const StyledHomePageLayout = styled.div`\n    background: #1f1f23;\n    color: white;\n    font-family: 'Courier New', Courier, monospace;\n`\n\nexport const StyledHomeFirstSection = styled.div`\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n`\n\nexport const StyledHomeFirstSectionTextContainer = styled.div`\n    margin: auto;\n    text-align: center;\n`\n\nexport const StyledHomeHeroContainer = styled.div`\n    margin-bottom: 32px;\n`\n\nexport const StyledHomeTitle = styled.h1`\n    margin-bottom: 4px;\n`\n\nexport const StyledHomeSubTitle = styled.h3`\n    margin-top: 4px;\n    color: #b9b9b9;\n`\n\nexport const StyledHomeSecondSectionTextContainer = styled.div`\n    text-align: right;\n    display: inline;\n    padding-bottom: 0.5em;\n`\n\nexport const StyledHomeLink = styled.a<{ showLink?: boolean }>`\n    font-size: 20px;\n    color: white;\n    text-decoration: none;\n    margin-left: 1em;\n    margin-right: 1em;\n    opacity: ${props => (props.showLink ? 1 : 0)};\n    transition: opacity 0.35s;\n    pointer-events: ${props => (props.showLink ? `all` : `none`)};\n\n    :hover {\n        font-style: italic;\n        color: white;\n        cursor: pointer;\n    }\n`\n\nconst sectionMargin = 24\n\nexport const StyledHomeSection = styled.div`\n    min-height: 60vh;\n    margin: ${`${sectionMargin}px`};\n    display: flex;\n    flex-direction: row;\n`\n\nexport const StyledHomeSectionInner = styled.div<{ right?: boolean }>`\n    width: ${props => (props.right ? `calc(65% - 24px)` : `calc(35% - 24px)`)};\n    margin-right: ${props => (props.right ? `0px` : `${sectionMargin}px`)};\n    display: flex;\n    flex-direction: column;\n\n    img {\n        object-fit: cover;\n        max-height: 800px;\n        width: 100%;\n        padding: 0px;\n    }\n`\n\nexport const StyledHomeSectionTitle = styled.h2`\n    margin-top: 0px;\n    margin-bottom: 0px;\n`\n\nexport const StyledHomeSectionRoleAndYear = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin-top: 4px;\n    margin-bottom: 16px;\n`\n\nexport const StyledHomeSectionRole = styled.h4`\n    margin: 0px;\n    margin-right: auto;\n`\n\nexport const StyledHomeSectionYear = styled.h4`\n    margin: 0px;\n    text-align: right;\n`\n\nexport const StyledHomeSectionText = styled.p`\n    margin-bottom: 1em;\n`\n\nexport const StyledHomeSectionLinksContainer = styled.ul`\n    align-self: flex-end;\n    padding-left: 0;\n    margin-top: auto;\n`\n\nexport const StyledHomeSectionLinkContainer = styled.li`\n    display: inline;\n    margin-left: 2em;\n`\n\nexport const StyledHomeSectionLink = styled.a`\n    font-size: 20px;\n    color: white;\n    text-decoration: none;\n\n    :hover {\n        font-style: italic;\n        color: white;\n        cursor: pointer;\n    }\n`\n","const uuidv1 = require('uuid/v1')\n\nexport enum NodeState {\n    INIT,\n    VISITING,\n    WAITING,\n    VISITED,\n}\n\nexport class NodeModel {\n    // data\n    id: string\n    value: any\n    leftChild?: NodeModel\n    rightChild?: NodeModel\n    // view\n    state: NodeState\n\n    constructor(val: any) {\n        this.id = uuidv1()\n        this.value = val\n        this.leftChild = undefined\n        this.rightChild = undefined\n        this.state = NodeState.INIT\n    }\n}\n\nexport enum GenNodeValueType {\n    STANDARD,\n    RANDOM,\n    EMOJI,\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    StyledHomeTitle,\n    StyledHomePageLayout,\n    StyledHomeFirstSection,\n    StyledHomeFirstSectionTextContainer,\n    StyledHomeSection,\n    StyledHomeSectionInner,\n    StyledHomeSectionTitle,\n    StyledHomeSectionText,\n    StyledHomeSectionLink,\n    StyledHomeSectionLinksContainer,\n    StyledHomeSectionLinkContainer,\n    StyledHomeSubTitle,\n    StyledHomeSectionRoleAndYear,\n    StyledHomeSectionRole,\n    StyledHomeSectionYear,\n    StyledHomeSecondSectionTextContainer,\n    StyledHomeLink,\n    StyledHomeHeroContainer,\n} from './StyledHome'\nimport { SectionInfoModel, SectionLinkModel } from '../../models/Home'\nimport kontrolImage from '../../images/kontrol.png'\nimport treeVizImage from '../../images/tree-viz.png'\nimport hackedImage from '../../images/hacked.jpg'\n\nconst firstSectionTextFull = 'Marcus Boay'\nconst secondSectionTextFull = 'Software Developer'\nconst thirdSectionTextFull =\n    ''\nconst personLinks = [\n    {\n        title: 'LinkedIn',\n        url: 'https://ca.linkedin.com/in/marcus-boay',\n    },\n    {\n        title: 'GitHub',\n        url: 'https://github.com/MarcusBoay',\n    },\n] as Array<SectionLinkModel>\nconst projects = [] as Array<SectionInfoModel>\nconst Home: React.FunctionComponent<{}> = () => {\n    const [firstSectionText, setFirstSectionText] = useState<string>('')\n    const [secondSectionText, setSecondSectionText] = useState<string>('')\n    const [thirdSectionText, setThirdSectionText] = useState<string>('')\n    const [showLinks, setShowLinks] = useState<boolean>(false)\n    let firstSectionTextPointer = 0\n    let secondSectionTextPointer = 0\n    let thirdSectionTextPointer = 0\n\n    // title text animation\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (firstSectionTextPointer < firstSectionTextFull.length) {\n                setFirstSectionText(\n                    firstSectionText =>\n                        firstSectionText +\n                        firstSectionTextFull[firstSectionTextPointer]\n                )\n                firstSectionTextPointer++\n            } else if (\n                firstSectionTextPointer >= firstSectionTextFull.length &&\n                secondSectionTextPointer < secondSectionTextFull.length\n            ) {\n                setSecondSectionText(\n                    secondSectionText =>\n                        secondSectionText +\n                        secondSectionTextFull[secondSectionTextPointer]\n                )\n                secondSectionTextPointer++\n            } else if (\n                secondSectionTextPointer >= secondSectionTextFull.length &&\n                thirdSectionTextPointer < thirdSectionTextFull.length\n            ) {\n                setThirdSectionText(\n                    thirdSectionText =>\n                        thirdSectionText +\n                        thirdSectionTextFull[thirdSectionTextPointer]\n                )\n                thirdSectionTextPointer++\n            } else {\n                clearInterval(interval)\n                setShowLinks(true)\n            }\n        }, 35)\n\n        return () => {\n            clearInterval(interval)\n            setShowLinks(true)\n        }\n    }, [])\n\n    return (\n        <StyledHomePageLayout>\n            <StyledHomeFirstSection>\n                <StyledHomeFirstSectionTextContainer>\n                    <StyledHomeHeroContainer>\n                        <StyledHomeTitle>{firstSectionText}</StyledHomeTitle>\n                        <StyledHomeSubTitle>\n                            {secondSectionText}\n                        </StyledHomeSubTitle>\n                    </StyledHomeHeroContainer>\n                    <StyledHomeSubTitle>{thirdSectionText}</StyledHomeSubTitle>\n                </StyledHomeFirstSectionTextContainer>\n                <StyledHomeSecondSectionTextContainer>\n                    {personLinks.map(link => (\n                        <StyledHomeLink href={link.url} showLink={showLinks}>\n                            {link.title}\n                        </StyledHomeLink>\n                    ))}\n                </StyledHomeSecondSectionTextContainer>\n            </StyledHomeFirstSection>\n            {projects\n                .sort((p1, p2) => (p1.year < p2.year ? 1 : -1))\n                .map(project => (\n                    <Section project={project} />\n                ))}\n        </StyledHomePageLayout>\n    )\n}\nexport default Home\n\ninterface SectionProps {\n    project: SectionInfoModel\n}\nconst Section: React.FunctionComponent<SectionProps> = ({ project }) => {\n    const generateLinks = () => {\n        return project.links.map(link => (\n            <StyledHomeSectionLinkContainer>\n                <StyledHomeSectionLink href={link.url}>\n                    {link.title}\n                </StyledHomeSectionLink>\n            </StyledHomeSectionLinkContainer>\n        ))\n    }\n\n    return (\n        <StyledHomeSection>\n            <StyledHomeSectionInner>\n                <StyledHomeSectionTitle>{project.title}</StyledHomeSectionTitle>\n                <StyledHomeSectionRoleAndYear>\n                    <StyledHomeSectionRole>\n                        {project.role}\n                    </StyledHomeSectionRole>\n                    <StyledHomeSectionYear>\n                        {project.year}\n                    </StyledHomeSectionYear>\n                </StyledHomeSectionRoleAndYear>\n                {project.description &&\n                    project.description.map(d => (\n                        <StyledHomeSectionText>{d}</StyledHomeSectionText>\n                    ))}\n                <StyledHomeSectionLinksContainer>\n                    {generateLinks()}\n                </StyledHomeSectionLinksContainer>\n            </StyledHomeSectionInner>\n            <StyledHomeSectionInner right>\n                <img src={project.image} alt={project.imageAlt} />\n            </StyledHomeSectionInner>\n        </StyledHomeSection>\n    )\n}\n","import styled from 'styled-components'\nimport { NodeState } from '../../models/TreeViz'\n\nexport const StyledPageLayout = styled.div`\n    display: flex;\n    flex-direction: row;\n    background: #1f1f23;\n    color: white;\n    font-family: 'Courier New', Courier, monospace;\n`\n\nexport const StyledPageSideTree = styled.svg`\n    padding-left: 32px;\n    width: 50%;\n    min-height: 100vh;\n`\n\nexport const StyledPageSideCode = styled.div`\n    border-left: 1px solid black;\n    padding: 32px;\n    width: 50%;\n    height: calc(100vh - 64px);\n    display: flex;\n    flex-direction: column;\n`\n\nexport const StyledCodePartContainer = styled.div`\n    flex-grow: 1;\n`\n\nexport const StyledGenerateTreePartContainer = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n`\n\nexport const StyledGenerateTreeDetailsContainer = styled.div``\n\nexport const StyledGenerateTreeButtonContainer = styled.div`\n    margin-left: auto;\n`\n\nexport const StyledNodeCircle = styled.circle<{\n    state: NodeState\n    speed: number\n}>`\n    fill: ${props =>\n        props.state === NodeState.INIT\n            ? `#1F1F23`\n            : props.state === NodeState.VISITING\n            ? `#44B3C4`\n            : props.state === NodeState.WAITING\n            ? `#5757B2`\n            : props.state === NodeState.VISITED && `#41637F`};\n    transition: ${props => props.speed + 'ms'};\n    stroke: #18cae6;\n    stroke-width: 2;\n    color: #18cae6;\n`\n\nexport const StyledNodeValue = styled.text`\n    pointer-events: none;\n    text-anchor: middle;\n    fill: #d0db97;\n`\n\nexport const StyledNodeBranch = styled.line`\n    stroke: #18cae6;\n    stroke-width: 2;\n`\n\nexport const StyledButton = styled.button`\n    background: transparent;\n    color: #eaeaea;\n    font-size: 1em;\n    font-family: 'Courier New', Courier, monospace;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid #eaeaea;\n    border-radius: 3px;\n    transition: 0.15s ease-in-out;\n\n    :hover {\n        background: #969696;\n        cursor: pointer;\n    }\n`\n\nexport const StyledRangedInput = styled.input`\n    min-width: 300px;\n    margin: 16px;\n`\n\nexport const StyledPageLinkText = styled.p`\n    font-size: 20px;\n    color: white;\n\n    a {\n        font-size: 20px;\n        color: white;\n        text-decoration: none;\n\n        :hover {\n            font-style: italic;\n            color: white;\n            cursor: pointer;\n        }\n    }\n`\n","import { createAction } from 'typesafe-actions'\nimport { NodeModel, GenNodeValueType } from '../../models/TreeViz'\n\n// Create, Update, Delete\nexport const createNodeAction = createAction(\n    'CREATE_NODE',\n    resolve => (nodeId: String) => resolve(nodeId)\n)\n\nexport const updateNodeAction = createAction(\n    'UPDATE_NODE',\n    resolve => (nodeId: String) => resolve(nodeId)\n)\n\nexport const deleteNodeAction = createAction(\n    'DELETE_NODE',\n    resolve => (nodeId: String) => resolve(nodeId)\n)\n\nexport const createRootNodeAction = createAction(\n    'CREATE_ROOT_NODE',\n    resolve => (node: NodeModel) => resolve(node)\n)\n\nexport const putRootNodeAction = createAction(\n    'PUT_ROOT_NODE',\n    resolve => (node: NodeModel) => resolve(node)\n)\n\nexport const updateTreeAction = createAction('UPDATE_TREE')\n\nexport const putTreeAction = createAction(\n    'PUT_TREE',\n    resolve => (tree: Array<NodeModel[]>) => resolve(tree)\n)\n\n// Generation\nexport const generateTreeAction = createAction('GENERATE_TREE')\n\nexport const putGenHeightAction = createAction(\n    'PUT_GEN_HEIGHT',\n    resolve => (genHeight: number) => resolve(genHeight)\n)\n\nexport const putGenIsBSTreeAction = createAction(\n    'PUT_GEN_IS_BS_TREE',\n    resolve => (genIsBSTree: boolean) => resolve(genIsBSTree)\n)\n\nexport const putGenIsCompleteTreeAction = createAction(\n    'PUT_GEN_IS_COMPLETE_TREE',\n    resolve => (genIsCompleteTree: boolean) => resolve(genIsCompleteTree)\n)\n\nexport const putGenIsFullTreeAction = createAction(\n    'PUT_GEN_IS_FULL_TREE',\n    resolve => (genIsFullTree: boolean) => resolve(genIsFullTree)\n)\n\nexport const putGenNodeValueTypeAction = createAction(\n    'PUT_GEN_NODE_VALUE_TYPE',\n    resolve => (valueType: GenNodeValueType) => resolve(valueType)\n)\n\n// Traversal\nexport const preOrderTraversalAction = createAction('PRE_ORDER_TRAVERSAL')\n\nexport const inOrderTraversalAction = createAction('IN_ORDER_TRAVERSAL')\n\nexport const postOrderTraversalAction = createAction('POST_ORDER_TRAVERSAL')\n\nexport const levelOrderTraversalAction = createAction('LEVEL_ORDER_TRAVERSAL')\n\nexport const resetNodesAction = createAction('RESET_NODES')\n\n// Traversal Settings\nexport const updateExecutionSpeedAction = createAction(\n    'UPDATE_EXECUTION_SPEED',\n    resolve => (speed: number) => resolve(speed)\n)\n","import { combineReducers } from 'redux'\nimport { RootAction } from '../actions'\nimport { NodeModel, GenNodeValueType } from '../../models/TreeViz'\nimport { getType } from 'typesafe-actions'\nimport {\n    putTreeAction,\n    putRootNodeAction,\n    updateExecutionSpeedAction,\n    putGenHeightAction,\n    putGenIsBSTreeAction,\n    putGenIsCompleteTreeAction,\n    putGenIsFullTreeAction,\n    putGenNodeValueTypeAction,\n} from '../actions/treeVisualizerActions'\nimport { RootState } from '.'\n\nexport type TreeVisualizerState = {\n    rootNode: NodeModel\n    tree: Array<NodeModel[]>\n    executionSpeed: number\n    genHeight: number\n    genIsBSTree: boolean\n    genIsCompleteTree: boolean\n    genIsFullTree: boolean\n    genNodeValueType: GenNodeValueType\n}\nexport const treeVisualizerReducer = combineReducers<\n    TreeVisualizerState,\n    RootAction\n>({\n    rootNode: (state: NodeModel = new NodeModel(0), action) => {\n        switch (action.type) {\n            case getType(putRootNodeAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n    tree: (state: Array<NodeModel[]> = [], action) => {\n        switch (action.type) {\n            case getType(putTreeAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n    executionSpeed: (state: number = 50, action) => {\n        switch (action.type) {\n            case getType(updateExecutionSpeedAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n    genHeight: (state: number = 4, action) => {\n        switch (action.type) {\n            case getType(putGenHeightAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n    genIsBSTree: (state: boolean = true, action) => {\n        switch (action.type) {\n            case getType(putGenIsBSTreeAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n    genIsCompleteTree: (state: boolean = false, action) => {\n        switch (action.type) {\n            case getType(putGenIsCompleteTreeAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n    genIsFullTree: (state: boolean = false, action) => {\n        switch (action.type) {\n            case getType(putGenIsFullTreeAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n    genNodeValueType: (\n        state: GenNodeValueType = GenNodeValueType.STANDARD,\n        action\n    ) => {\n        switch (action.type) {\n            case getType(putGenNodeValueTypeAction):\n                return action.payload\n            default:\n                return state\n        }\n    },\n})\n\nexport const getRootNodeFromState = (state: RootState): NodeModel => {\n    return state.treeVisualizer.rootNode\n}\n\nexport const getTreeFromState = (state: RootState): Array<NodeModel[]> => {\n    return state.treeVisualizer.tree\n}\n\nexport const getExecutionSpeedFromState = (state: RootState): number => {\n    return state.treeVisualizer.executionSpeed\n}\n\nexport const getGenHeightFromState = (state: RootState): number => {\n    return state.treeVisualizer.genHeight\n}\n\nexport const getGenIsBSTreeFromState = (state: RootState): boolean => {\n    return state.treeVisualizer.genIsBSTree\n}\n\nexport const getGenIsCompleteTreefromState = (state: RootState): boolean => {\n    return state.treeVisualizer.genIsCompleteTree\n}\n\nexport const getGenIsFullTreeFromState = (state: RootState): boolean => {\n    return state.treeVisualizer.genIsFullTree\n}\n\nexport const getGenNodeValueTypeFromState = (\n    state: RootState\n): GenNodeValueType => {\n    return state.treeVisualizer.genNodeValueType\n}\n","import React, { useEffect, Fragment } from 'react'\nimport {\n    StyledPageLayout,\n    StyledPageSideTree,\n    StyledPageSideCode,\n    StyledNodeCircle,\n    StyledNodeValue,\n    StyledNodeBranch,\n    StyledButton,\n    StyledGenerateTreePartContainer,\n    StyledCodePartContainer,\n    StyledGenerateTreeButtonContainer,\n    StyledGenerateTreeDetailsContainer,\n    StyledRangedInput,\n    StyledPageLinkText,\n} from './StyledTreeViz'\nimport { RootState } from '../../redux/reducers'\nimport { NodeModel, GenNodeValueType } from '../../models/TreeViz'\nimport { Dispatch, bindActionCreators } from 'redux'\nimport { RootAction } from '../../redux/actions'\nimport {\n    getTreeFromState,\n    getRootNodeFromState,\n    getExecutionSpeedFromState,\n    getGenHeightFromState,\n    getGenIsBSTreeFromState,\n    getGenNodeValueTypeFromState,\n} from '../../redux/reducers/treeVisualizerReducer'\nimport {\n    createRootNodeAction,\n    preOrderTraversalAction,\n    inOrderTraversalAction,\n    resetNodesAction,\n    postOrderTraversalAction,\n    levelOrderTraversalAction,\n    updateExecutionSpeedAction,\n    generateTreeAction,\n    putGenHeightAction,\n    putGenIsBSTreeAction,\n    putGenNodeValueTypeAction,\n} from '../../redux/actions/treeVisualizerActions'\nimport { connect } from 'react-redux'\n\ninterface TreeVizProps {\n    rootNode: NodeModel\n    tree: Array<NodeModel[]>\n    executionSpeed: number\n    genHeight: number\n    genIsBSTree: boolean\n    genNodeValueType: GenNodeValueType\n    createRootNode: (node: NodeModel) => void\n    resetNodes: () => void\n    preOrderTraversal: () => void\n    inOrderTraversal: () => void\n    postOrderTraversal: () => void\n    levelOrderTraversal: () => void\n    updateExecutionSpeed: (speed: number) => void\n    generateTree: () => void\n    putGenTreeHeight: (genHeight: number) => void\n    putGenIsBSTree: (genIsBST: boolean) => void\n    putGenNodeValueType: (genNodeValueType: GenNodeValueType) => void\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    rootNode: getRootNodeFromState(state),\n    tree: getTreeFromState(state),\n    executionSpeed: getExecutionSpeedFromState(state),\n    genHeight: getGenHeightFromState(state),\n    genIsBSTree: getGenIsBSTreeFromState(state),\n    genNodeValueType: getGenNodeValueTypeFromState(state),\n})\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) =>\n    bindActionCreators(\n        {\n            createRootNode: createRootNodeAction,\n            resetNodes: resetNodesAction,\n            preOrderTraversal: preOrderTraversalAction,\n            inOrderTraversal: inOrderTraversalAction,\n            postOrderTraversal: postOrderTraversalAction,\n            levelOrderTraversal: levelOrderTraversalAction,\n            updateExecutionSpeed: updateExecutionSpeedAction,\n            generateTree: generateTreeAction,\n            putGenTreeHeight: putGenHeightAction,\n            putGenIsBSTree: putGenIsBSTreeAction,\n            putGenNodeValueType: putGenNodeValueTypeAction,\n        },\n        dispatch\n    )\n\nconst TreeViz: React.FunctionComponent<TreeVizProps> = ({\n    rootNode,\n    tree,\n    executionSpeed,\n    createRootNode,\n    resetNodes,\n    preOrderTraversal,\n    inOrderTraversal,\n    postOrderTraversal,\n    levelOrderTraversal,\n    updateExecutionSpeed,\n    generateTree,\n    putGenTreeHeight,\n    putGenIsBSTree,\n    putGenNodeValueType,\n    genHeight,\n    genIsBSTree,\n    genNodeValueType,\n}) => {\n    useEffect(() => {\n        // initial set of nodes\n        let curNode = rootNode\n        rootNode.leftChild = new NodeModel(1)\n        rootNode.rightChild = new NodeModel(2)\n        curNode = rootNode.leftChild\n        curNode.leftChild = new NodeModel(3)\n        curNode.rightChild = new NodeModel(4)\n        curNode = rootNode.rightChild\n        curNode.leftChild = new NodeModel(5)\n        curNode.rightChild = new NodeModel(6)\n        curNode = rootNode.leftChild!.leftChild!\n        curNode.leftChild = new NodeModel(7)\n        curNode.rightChild = new NodeModel(8)\n        curNode = rootNode.leftChild!.rightChild!\n        curNode.leftChild = new NodeModel(9)\n        curNode.rightChild = new NodeModel(10)\n        curNode = rootNode.leftChild!.leftChild!.leftChild!\n        curNode.leftChild = new NodeModel(11)\n\n        createRootNode(rootNode)\n    }, [])\n\n    return (\n        <StyledPageLayout>\n            <StyledPageSideTree>\n                <Tree tree={tree} speed={executionSpeed} />\n            </StyledPageSideTree>\n            <StyledPageSideCode>\n                <StyledCodePartContainer>\n                    {/* <p>this is where the code should live</p> */}\n                    <StyledButton\n                        onClick={() => {\n                            preOrderTraversal()\n                        }}\n                    >\n                        pre order\n                    </StyledButton>\n                    <StyledButton\n                        onClick={() => {\n                            inOrderTraversal()\n                        }}\n                    >\n                        in order\n                    </StyledButton>\n                    <StyledButton\n                        onClick={() => {\n                            postOrderTraversal()\n                        }}\n                    >\n                        post order\n                    </StyledButton>\n                    <StyledButton\n                        onClick={() => {\n                            levelOrderTraversal()\n                        }}\n                    >\n                        level order\n                    </StyledButton>\n                    <StyledButton\n                        onClick={() => {\n                            resetNodes()\n                        }}\n                    >\n                        reset\n                    </StyledButton>\n                    <div>\n                        <StyledRangedInput\n                            type=\"range\"\n                            list=\"speed-tickmarks\"\n                            min=\"50\"\n                            max=\"1000\"\n                            value={executionSpeed}\n                            onChange={event => {\n                                updateExecutionSpeed(Number(event.target.value))\n                            }}\n                        />\n                        <datalist id=\"speed-tickmarks\">\n                            <option value=\"50\" label=\"50ms\"></option>\n                            <option value=\"100\"></option>\n                            <option value=\"150\"></option>\n                            <option value=\"200\"></option>\n                            <option value=\"250\" label=\"250ms\"></option>\n                            <option value=\"300\"></option>\n                            <option value=\"400\"></option>\n                            <option value=\"500\" label=\"500ms\"></option>\n                            <option value=\"600\"></option>\n                            <option value=\"700\"></option>\n                            <option value=\"800\"></option>\n                            <option value=\"900\"></option>\n                            <option value=\"1000\" label=\"1000ms\"></option>\n                        </datalist>\n                        <span>Speed</span>\n                    </div>\n                </StyledCodePartContainer>\n                <StyledGenerateTreePartContainer>\n                    <StyledGenerateTreeDetailsContainer>\n                        <div>\n                            <StyledRangedInput\n                                type=\"range\"\n                                list=\"height-tickmarks\"\n                                min=\"1\"\n                                max=\"5\"\n                                step=\"1\"\n                                value={genHeight}\n                                onChange={event => {\n                                    putGenTreeHeight(Number(event.target.value))\n                                }}\n                            />\n                            <datalist id=\"height-tickmarks\">\n                                <option value=\"1\" label=\"1\"></option>\n                                <option value=\"2\"></option>\n                                <option value=\"3\"></option>\n                                <option value=\"4\"></option>\n                                <option value=\"5\" label=\"5\"></option>\n                            </datalist>\n                            <span>height</span>\n                        </div>\n                        {/* <div>\n                            is BST (left child is smaller than current is\n                            smaller than right child)? no\n                        </div>\n                        <div>node values: standard, randomized, 🐶</div> */}\n                    </StyledGenerateTreeDetailsContainer>\n                    <StyledGenerateTreeButtonContainer>\n                        <StyledButton onClick={generateTree}>\n                            Generate\n                        </StyledButton>\n                    </StyledGenerateTreeButtonContainer>\n                </StyledGenerateTreePartContainer>\n                <StyledPageLinkText>\n                    View source code on{' '}\n                    <a\n                        href={\n                            'https://github.com/MarcusBoay/marcusboay.github.io/tree/dev/src/pages/TreeViz'\n                        }\n                    >\n                        GitHub\n                    </a>\n                </StyledPageLinkText>\n            </StyledPageSideCode>\n        </StyledPageLayout>\n    )\n}\nconst ConnectTreeViz = connect(mapStateToProps, mapDispatchToProps)(TreeViz)\nexport default ConnectTreeViz\n\ninterface TreeProps {\n    tree: Array<NodeModel[]>\n    speed: number\n}\nconst Tree: React.FunctionComponent<TreeProps> = ({ tree, speed }) => {\n    const radius: number = 20\n    const spacing: number = 10\n    const position: number = radius + spacing / 2\n\n    return (\n        <>\n            {tree.map((levelNodes, level) =>\n                levelNodes.map((node, index) => {\n                    const x =\n                        Math.pow(2, tree.length - level) *\n                        (index + 0.5) *\n                        position\n                    const y = 4 * (level + 1) * position\n\n                    const xLeftChild =\n                        Math.pow(2, tree.length - level - 1) *\n                        (2 * index + 0.5) *\n                        position\n                    const xRightChild =\n                        Math.pow(2, tree.length - level - 1) *\n                        (2 * index + 0.5 + 1) *\n                        position\n                    const yChild = 4 * (level + 2) * position\n\n                    const thetaLeft = Math.atan(\n                        Math.abs(x - xLeftChild) / Math.abs(y - yChild)\n                    )\n                    const thetaRight = Math.atan(\n                        Math.abs(x - xRightChild) / Math.abs(y - yChild)\n                    )\n\n                    const leftBranchXOffset = radius * Math.sin(thetaLeft)\n                    const rightBranchXOffset = radius * Math.sin(thetaRight)\n                    const leftBranchYOffset = radius * Math.cos(thetaLeft)\n                    const rightBranchYOffset = radius * Math.cos(thetaRight)\n\n                    return (\n                        <Fragment key={node.id}>\n                            <Node\n                                x={x}\n                                y={y}\n                                level={level}\n                                radius={radius}\n                                node={node}\n                                speed={speed}\n                            />\n                            {node.leftChild && (\n                                <StyledNodeBranch\n                                    x1={x - leftBranchXOffset}\n                                    y1={y + leftBranchYOffset}\n                                    x2={xLeftChild}\n                                    y2={yChild}\n                                />\n                            )}\n                            {node.rightChild && (\n                                <StyledNodeBranch\n                                    x1={x + rightBranchXOffset}\n                                    y1={y + rightBranchYOffset}\n                                    x2={xRightChild}\n                                    y2={yChild}\n                                />\n                            )}\n                        </Fragment>\n                    )\n                })\n            )}\n        </>\n    )\n}\n\ninterface NodeProps {\n    x: number\n    y: number\n    level: number\n    radius: number\n    node: NodeModel\n    speed: number\n}\nconst Node: React.FunctionComponent<NodeProps> = ({\n    x,\n    y,\n    radius,\n    node,\n    speed,\n}) => {\n    return (\n        <g>\n            <StyledNodeCircle\n                cx={x}\n                cy={y}\n                r={radius}\n                state={node.state}\n                speed={speed}\n            />\n            <StyledNodeValue x={x} y={y} dy=\".3em\">\n                {node.value}\n            </StyledNodeValue>\n        </g>\n    )\n}\n","import styled from 'styled-components'\n\nexport const StyledAppLayout = styled.div`\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n`\n","import {\n    takeLatest,\n    all,\n    select,\n    put,\n    putResolve,\n    delay,\n    call,\n    take,\n    fork,\n    cancel,\n} from 'redux-saga/effects'\nimport { getType, ActionType } from 'typesafe-actions'\nimport {\n    updateTreeAction,\n    putTreeAction,\n    createRootNodeAction,\n    putRootNodeAction,\n    preOrderTraversalAction,\n    inOrderTraversalAction,\n    resetNodesAction,\n    postOrderTraversalAction,\n    levelOrderTraversalAction,\n    generateTreeAction,\n} from '../actions/treeVisualizerActions'\nimport { NodeModel, NodeState, GenNodeValueType } from '../../models/TreeViz'\nimport {\n    getRootNodeFromState,\n    getExecutionSpeedFromState,\n    getGenHeightFromState,\n    getGenIsBSTreeFromState,\n    getGenIsCompleteTreefromState,\n    getGenIsFullTreeFromState,\n    getGenNodeValueTypeFromState,\n} from '../reducers/treeVisualizerReducer'\n\nfunction* createRootNodeSaga(action: ActionType<typeof createRootNodeAction>) {\n    try {\n        const rootNode = action.payload\n        yield putResolve(putRootNodeAction(rootNode))\n        yield put(updateTreeAction())\n    } catch (e) {\n        console.warn('create root node saga: something went wrong!', e)\n    }\n}\n\nfunction* updateTreeSaga() {\n    try {\n        const rootNode = yield select(getRootNodeFromState)\n\n        let queue: NodeModel[] = []\n        queue.push(rootNode)\n\n        let nodesLevels: Array<NodeModel[]> = []\n        while (queue.length > 0) {\n            let levelSize = queue.length\n\n            let curLevel: NodeModel[] = []\n            while (levelSize > 0) {\n                let curNode: NodeModel = queue.shift() as NodeModel\n\n                curLevel.push(curNode)\n\n                if (curNode!.leftChild) queue.push(curNode!.leftChild)\n                if (curNode!.rightChild) queue.push(curNode!.rightChild)\n\n                levelSize--\n            }\n            nodesLevels.push(curLevel)\n        }\n\n        yield put(putTreeAction([...nodesLevels]))\n    } catch (e) {\n        console.error('update tree saga: something went wrong!', e)\n    }\n}\n\n// Traversal\n\nfunction* preOrderTraversalSaga() {\n    try {\n        yield put(resetNodesAction())\n\n        const rootNode = yield select(getRootNodeFromState)\n\n        const preOrderTask = yield fork(preOrderTraversalSagaHelper, rootNode)\n\n        yield take(resetNodesAction)\n\n        yield cancel(preOrderTask)\n    } catch (e) {\n        console.error('preorder traversal saga: something went wrong!', e)\n    }\n}\nfunction* preOrderTraversalSagaHelper(curNode: NodeModel): any {\n    if (!curNode) return\n\n    curNode.state = NodeState.WAITING\n    //nothing to wait for...\n\n    curNode.state = NodeState.VISITING\n    yield putResolve(updateTreeAction())\n    yield delay(yield select(getExecutionSpeedFromState))\n\n    yield call(preOrderTraversalSagaHelper, curNode.leftChild!)\n    yield call(preOrderTraversalSagaHelper, curNode.rightChild!)\n\n    curNode.state = NodeState.VISITED\n    yield putResolve(updateTreeAction())\n    yield delay(yield select(getExecutionSpeedFromState))\n}\n\nfunction* inOrderTraversalSaga() {\n    try {\n        yield put(resetNodesAction())\n\n        const rootNode = yield select(getRootNodeFromState)\n\n        const inOrderTask = yield fork(inOrderTraversalSagaHelper, rootNode)\n\n        yield take(resetNodesAction)\n\n        yield cancel(inOrderTask)\n    } catch (e) {\n        console.error('inorder traversal saga: something went wrong!', e)\n    }\n}\nfunction* inOrderTraversalSagaHelper(curNode: NodeModel): any {\n    if (!curNode) return\n\n    curNode.state = NodeState.WAITING\n    yield call(inOrderTraversalSagaHelper, curNode.leftChild!)\n\n    curNode.state = NodeState.VISITING\n    yield putResolve(updateTreeAction())\n    yield delay(yield select(getExecutionSpeedFromState))\n\n    yield call(inOrderTraversalSagaHelper, curNode.rightChild!)\n\n    curNode.state = NodeState.VISITED\n    yield putResolve(updateTreeAction())\n    yield delay(yield select(getExecutionSpeedFromState))\n}\n\nfunction* postOrderTraversalSaga() {\n    try {\n        yield put(resetNodesAction())\n\n        const rootNode = yield select(getRootNodeFromState)\n\n        const postOrderTask = yield fork(postOrderTraversalSagaHelper, rootNode)\n\n        yield take(resetNodesAction)\n\n        yield cancel(postOrderTask)\n    } catch (e) {\n        console.error('postorder traversal saga: something went wrong!', e)\n    }\n}\nfunction* postOrderTraversalSagaHelper(curNode: NodeModel): any {\n    if (!curNode) return\n\n    curNode.state = NodeState.WAITING\n    yield call(postOrderTraversalSagaHelper, curNode.leftChild!)\n\n    yield call(postOrderTraversalSagaHelper, curNode.rightChild!)\n\n    curNode.state = NodeState.VISITING\n    yield putResolve(updateTreeAction())\n    yield delay(yield select(getExecutionSpeedFromState))\n\n    curNode.state = NodeState.VISITED\n    yield putResolve(updateTreeAction())\n    yield delay(yield select(getExecutionSpeedFromState))\n}\n\nfunction* levelOrderTraversalSaga() {\n    try {\n        yield put(resetNodesAction())\n\n        const levelOrderTask = yield fork(levelOrderTraversalSagaHelper)\n\n        yield take(resetNodesAction)\n\n        yield cancel(levelOrderTask)\n    } catch (e) {\n        console.error('level order traversal saga: something went wrong!', e)\n    }\n}\nfunction* levelOrderTraversalSagaHelper() {\n    const rootNode = yield select(getRootNodeFromState)\n\n    let queue: NodeModel[] = []\n    queue.push(rootNode)\n\n    while (queue.length > 0) {\n        let levelSize = queue.length\n\n        while (levelSize > 0) {\n            let curNode: NodeModel = queue.shift() as NodeModel\n            curNode.state = NodeState.VISITING\n            yield putResolve(updateTreeAction())\n            yield delay(yield select(getExecutionSpeedFromState))\n            curNode.state = NodeState.VISITED\n\n            if (curNode!.leftChild) queue.push(curNode!.leftChild)\n            if (curNode!.rightChild) queue.push(curNode!.rightChild)\n\n            levelSize--\n        }\n    }\n    yield putResolve(updateTreeAction())\n}\n\nfunction* resetNodesSaga() {\n    try {\n        const rootNode = yield select(getRootNodeFromState)\n\n        yield call(resetNodesSagaHelper, rootNode)\n        yield putResolve(updateTreeAction())\n    } catch (e) {\n        console.error('reset nodes saga: something went wrong!', e)\n    }\n}\nfunction* resetNodesSagaHelper(curNode: NodeModel): any {\n    if (!curNode) return\n\n    curNode.state = NodeState.INIT\n    yield call(resetNodesSagaHelper, curNode.leftChild!)\n    yield call(resetNodesSagaHelper, curNode.rightChild!)\n}\n\n// Generation\n\nfunction* generateTreeSaga() {\n    try {\n        yield put(resetNodesAction())\n\n        const height = yield select(getGenHeightFromState)\n        const isBST = yield select(getGenIsBSTreeFromState)\n        const isComplete = yield select(getGenIsCompleteTreefromState)\n        const isFull = yield select(getGenIsFullTreeFromState)\n        const valueType = yield select(getGenNodeValueTypeFromState)\n\n        let maxNodes = 0\n        for (let h = 0; h < height; h++) {\n            maxNodes += 2 ** h\n        }\n\n        let queue = [] as Array<[NodeModel, number, number]>\n        let rootNode = generateNode(valueType, isBST, 0, maxNodes, 0)\n        queue.push([rootNode, 0, maxNodes])\n        let curHeight = 1\n        let count = 1\n\n        while (curHeight < height) {\n            let curLevelNodes = queue.length\n            while (curLevelNodes > 0) {\n                let cur = queue.shift() as [NodeModel, number, number]\n                let curNode = cur[0] as NodeModel\n                let minVal = cur[1]\n                let maxVal = cur[2]\n\n\n                // here is where the isComplete and isFull logic should come into play\n                curNode.leftChild = generateNode(valueType, isBST, minVal, curNode.value, count)\n                count++\n                queue.push([curNode.leftChild, minVal, curNode.value])\n\n                curNode.rightChild = generateNode(valueType, isBST, curNode.value, maxVal, count)\n                count++\n                queue.push([curNode.rightChild, curNode.value, maxVal])\n\n                curLevelNodes--\n            }\n            curHeight++\n        }\n\n        yield put(createRootNodeAction(rootNode))\n    } catch (e) {\n        console.error('generate tree saga: something went wrong!', e)\n    }\n}\nlet generateNode = (\n    valueType: GenNodeValueType,\n    isBST: boolean,\n    minVal: number,\n    maxVal: number,\n    count: number\n) => {\n    switch (valueType) {\n        case GenNodeValueType.STANDARD:\n            if (isBST) {\n                return new NodeModel(Math.floor((minVal + maxVal) / 2))\n            }\n            return new NodeModel(count)\n        case GenNodeValueType.RANDOM:\n            // RANDOM overrides isBST\n            return new NodeModel(Math.floor(Math.random() * Math.floor(100)))\n        case GenNodeValueType.EMOJI:\n            let emojis = [\n                '😄','😃','😀','😊','☺','😉','😍','😘','😚','😗','😙','😜','😝','😛','😳','😁','😔','😌','😒','😞','😣','😢','😂','😭','😪','😥','😰','😅','😓','😩','😫','😨','😱','😠','😡','😤','😖','😆','😋','😷','😎','😴','😵','😲','😟','😦','😧','😈','👿','😮','😬','😐','😕','😯','😶','😇','😏','😑','👲','👳','👮','👷','💂','👶','👦','👧','👨','👩','👴','👵','👱','👼','👸','😺','😸','😻','😽','😼','🙀','😿','😹','😾','👹','👺','🙈','🙉','🙊','💀','👽','💩','🔥','✨','🌟','💫','💥','💢','💦','💧','💤','💨','👂','👀','👃','👅','👄','👍','👎','👌','👊','✊','✌','👋','✋','👐','👆','👇','👉','👈','🙌','🙏','☝','👏','💪','🚶','🏃','💃','👫','👪','👬','👭','💏','💑','👯','🙆','🙅','💁','🙋','💆','💇','💅','👰','🙎','🙍','🙇','🎩','👑','👒','👟','👞','👡','👠','👢','👕','👔','👚','👗','🎽','👖','👘','👙','💼','👜','👝','👛','👓','🎀','🌂','💄','💛','💙','💜','💚','❤','💔','💗','💓','💕','💖','💞','💘','💌','💋','💍','💎','👤','👥','💬','👣','💭','🐶','🐺','🐱','🐭','🐹','🐰','🐸','🐯','🐨','🐻','🐷','🐽','🐮','🐗','🐵','🐒','🐴','🐑','🐘','🐼','🐧','🐦','🐤','🐥','🐣','🐔','🐍','🐢','🐛','🐝','🐜','🐞','🐌','🐙','🐚','🐠','🐟','🐬','🐳','🐋','🐄','🐏','🐀','🐃','🐅','🐇','🐉','🐎','🐐','🐓','🐕','🐖','🐁','🐂','🐲','🐡','🐊','🐫','🐪','🐆','🐈','🐩','🐾','💐','🌸','🌷','🍀','🌹','🌻','🌺','🍁','🍃','🍂','🌿','🌾','🍄','🌵','🌴','🌲','🌳','🌰','🌱','🌼','🌐','🌞','🌝','🌚','🌑','🌒','🌓','🌔','🌕','🌖','🌗','🌘','🌜','🌛','🌙','🌍','🌎','🌏','🌋','🌌','🌠','⭐','☀','⛅','☁','⚡','☔','❄','⛄','🌀','🌁','🌈','🌊','🎍','💝','🎎','🎒','🎓','🎏','🎆','🎇','🎐','🎑','🎃','👻','🎅','🎄','🎁','🎋','🎉','🎊','🎈','🎌','🔮','🎥','📷','📹','📼','💿','📀','💽','💾','💻','📱','☎','📞','📟','📠','📡','📺','📻','🔊','🔉','🔈','🔇','🔔','🔕','📢','📣','⏳','⌛','⏰','⌚','🔓','🔒','🔏','🔐','🔑','🔎','💡','🔦','🔆','🔅','🔌','🔋','🔍','🛁','🛀','🚿','🚽','🔧','🔩','🔨','🚪','🚬','💣','🔫','🔪','💊','💉','💰','💴','💵','💷','💶','💳','💸','📲','📧','📥','📤','✉','📩','📨','📯','📫','📪','📬','📭','📮','📦','📝','📄','📃','📑','📊','📈','📉','📜','📋','📅','📆','📇','📁','📂','✂','📌','📎','✒','✏','📏','📐','📕','📗','📘','📙','📓','📔','📒','📚','📖','🔖','📛','🔬','🔭','📰','🎨','🎬','🎤','🎧','🎼','🎵','🎶','🎹','🎻','🎺','🎷','🎸','👾','🎮','🃏','🎴','🀄','🎲','🎯','🏈','🏀','⚽','⚾','🎾','🎱','🏉','🎳','⛳','🚵','🚴','🏁','🏇','🏆','🎿','🏂','🏊','🏄','🎣','☕','🍵','🍶','🍼','🍺','🍻','🍸','🍹','🍷','🍴','🍕','🍔','🍟','🍗','🍖','🍝','🍛','🍤','🍱','🍣','🍥','🍙','🍘','🍚','🍜','🍲','🍢','🍡','🍳','🍞','🍩','🍮','🍦','🍨','🍧','🎂','🍰','🍪','🍫','🍬','🍭','🍯','🍎','🍏','🍊','🍋','🍒','🍇','🍉','🍓','🍑','🍈','🍌','🍐','🍍','🍠','🍆','🍅','🌽','🏠','🏡','🏫','🏢','🏣','🏥','🏦','🏪','🏩','🏨','💒','⛪','🏬','🏤','🌇','🌆','🏯','🏰','⛺','🏭','🗼','🗾','🗻','🌄','🌅','🌃','🗽','🌉','🎠','🎡','⛲','🎢','🚢','⛵','🚤','🚣','⚓','🚀','✈','💺','🚁','🚂','🚊','🚉','🚞','🚆','🚄','🚅','🚈','🚇','🚝','🚋','🚃','🚎','🚌','🚍','🚙','🚘','🚗','🚕','🚖','🚛','🚚','🚨','🚓','🚔','🚒','🚑','🚐','🚲','🚡','🚟','🚠','🚜','💈','🚏','🎫','🚦','🚥','⚠','🚧','🔰','⛽','🏮','🎰','♨','🗿','🎪','🎭','📍','🚩','⬆','⬇','⬅','➡','🔠','🔡','🔤','↗','↖','↘','↙','↔','↕','🔄','◀','▶','🔼','🔽','↩','↪','ℹ','⏪','⏩','⏫','⏬','⤵','⤴','🆗','🔀','🔁','🔂','🆕','🆙','🆒','🆓','🆖','📶','🎦','🈁','🈯','🈳','🈵','🈴','🈲','🉐','🈹','🈺','🈶','🈚','🚻','🚹','🚺','🚼','🚾','🚰','🚮','🅿','♿','🚭','🈷','🈸','🈂','Ⓜ','🛂','🛄','🛅','🛃','🉑','㊙','㊗','🆑','🆘','🆔','🚫','🔞','📵','🚯','🚱','🚳','🚷','🚸','⛔','✳','❇','❎','✅','✴','💟','🆚','📳','📴','🅰','🅱','🆎','🅾','💠','➿','♻','♈','♉','♊','♋','♌','♍','♎','♏','♐','♑','♒','♓','⛎','🔯','🏧','💹','💲','💱','©','®','™','〽','〰','🔝','🔚','🔙','🔛','🔜','❌','⭕','❗','❓','❕','❔','🔃','🕛','🕧','🕐','🕜','🕑','🕝','🕒','🕞','🕓','🕟','🕔','🕠','🕕','🕖','🕗','🕘','🕙','🕚','🕡','🕢','🕣','🕤','🕥','🕦','✖','➕','➖','➗','♠','♥','♣','♦','💮','💯','✔','☑','🔘','🔗','➰','🔱','🔲','🔳','◼','◻','◾','◽','▪','▫','🔺','⬜','⬛','⚫','⚪','🔴','🔵','🔻','🔶','🔷','🔸','🔹'\n            ]\n        return new NodeModel(emojis[Math.floor(Math.random() * emojis.length)])\n    }\n}\n\nfunction* treeVisualizerSaga() {\n    yield all([\n        yield takeLatest(getType(createRootNodeAction), createRootNodeSaga),\n        yield takeLatest(getType(updateTreeAction), updateTreeSaga),\n        yield takeLatest(\n            getType(preOrderTraversalAction),\n            preOrderTraversalSaga\n        ),\n        yield takeLatest(getType(inOrderTraversalAction), inOrderTraversalSaga),\n        yield takeLatest(\n            getType(postOrderTraversalAction),\n            postOrderTraversalSaga\n        ),\n        yield takeLatest(\n            getType(levelOrderTraversalAction),\n            levelOrderTraversalSaga\n        ),\n        yield takeLatest(getType(resetNodesAction), resetNodesSaga),\n        yield takeLatest(getType(generateTreeAction), generateTreeSaga)\n    ])\n}\nexport default treeVisualizerSaga\n","import { all, fork } from 'redux-saga/effects'\nimport treeVisualizerSaga from './treeVisualizerSaga'\n\nexport default function* rootSaga() {\n    yield all([fork(treeVisualizerSaga)])\n}\n","import { combineReducers } from 'redux'\nimport { RootAction } from '../actions'\nimport {\n    treeVisualizerReducer,\n    TreeVisualizerState,\n} from './treeVisualizerReducer'\n\nexport interface RootState {\n    readonly treeVisualizer: TreeVisualizerState\n}\n\nexport const RootReducer = combineReducers<RootState, RootAction>({\n    treeVisualizer: treeVisualizerReducer,\n})\n","import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from './sagas'\nimport { RootReducer } from './reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middlewares = [sagaMiddleware]\n\nlet enhancer: any = null\nif (process.env.NODE_ENV !== `production`) {\n    if (typeof window !== 'undefined') {\n        enhancer = composeWithDevTools(applyMiddleware(...middlewares))\n    }\n} else {\n    enhancer = applyMiddleware(...middlewares)\n}\n\nconst store = createStore(RootReducer, {}, enhancer)\nsagaMiddleware.run(rootSaga)\nexport default store\n","import React from 'react'\nimport { Route, HashRouter } from 'react-router-dom'\nimport Home from './pages/Home/Home'\nimport TreeViz from './pages/TreeViz/TreeViz'\nimport { StyledAppLayout } from './StyledApp'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <StyledAppLayout>\n                <HashRouter>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/tree-viz\" component={TreeViz} />\n                </HashRouter>\n            </StyledAppLayout>\n        </Provider>\n    )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}